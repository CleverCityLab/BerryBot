name: Auto Label Pull Requests

on:
  pull_request:
    types: [ opened, reopened, ready_for_review, synchronize ]
  pull_request_review:
    types: [ submitted, edited, dismissed ]

jobs:
  label-pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: Set labels depending on review status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const prNumber = pr.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const reviews = await github.paginate(
              github.rest.pulls.listReviews,
              { owner, repo, pull_number: prNumber }
            );
            
            const { data: commits } = await github.rest.pulls.listCommits({
              owner,
              repo,
              pull_number: prNumber,
            });
            
            const latestCommitDate = new Date(commits[commits.length - 1].commit.committer.date);
            
            // Фильтруем ревью: только те, что были после последнего коммита
            const latestReviewsByUser = new Map();
            for (const review of reviews) {
              const reviewDate = new Date(review.submitted_at);
              if (reviewDate > latestCommitDate) {
                latestReviewsByUser.set(review.user.login, review);
              }
            }

            const approvals = new Set();

            for (const review of latestReviewsByUser.values()) {
              if (review.state === "APPROVED") {
                approvals.add(review.user.login);
              }
            }

            const hasAnyReview = [...latestReviewsByUser.values()].length > 0;
            const labelsToSet = new Set();

            if (approvals.size >= 1) {
              labelsToSet.add("Approve");
            } else if (hasAnyReview) {
              labelsToSet.add("Review");
            }

            const existingLabels = pr.labels.map(l => l.name);
            const customLabels = ["Approve", "Review"];
            const labelsToRemove = existingLabels.filter(l => customLabels.includes(l) && !labelsToSet.has(l));

            for (const label of labelsToRemove) {
              if (existingLabels.includes(label)) {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: prNumber,
                  name: label
                });
              }
            }

            for (const label of labelsToSet) {
              if (!existingLabels.includes(label)) {
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: prNumber,
                  labels: [label]
                });
              }
            }
