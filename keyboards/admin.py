from math import ceil

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from utils.statuses import S_WAITING, S_READY, S_TRANSFERRING, S_FINISHED, S_PROCESSING, S_CANCELLED


def admin_positions_list(
        positions: list[dict],
        page: int = 1,
        page_size: int = 50,
) -> InlineKeyboardMarkup:
    total = len(positions)
    total_pages = max(1, ceil(total / page_size))
    page = max(1, min(page, total_pages))

    start = (page - 1) * page_size
    end = start + page_size
    page_positions = positions[start:end]

    rows: list[list[InlineKeyboardButton]] = []

    for p in page_positions:
        title = f"{p['title']} ‚Äî {p['price']} —Ä—É–±, {p['quantity']} —à—Ç"
        rows.append([InlineKeyboardButton(text=title, callback_data=f"adm-pos:{p['id']}")])

    if total_pages > 1:
        prev_page = page - 1 if page > 1 else 1
        next_page = page + 1 if page < total_pages else total_pages
        rows.append([
            InlineKeyboardButton(text="¬´", callback_data="positions:page:1" if page > 1 else "noop"),
            InlineKeyboardButton(text="‚Äπ", callback_data=f"positions:page:{prev_page}" if page > 1 else "noop"),
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop"),
            InlineKeyboardButton(text="‚Ä∫",
                                 callback_data=f"positions:page:{next_page}" if page < total_pages else "noop"),
            InlineKeyboardButton(text="¬ª",
                                 callback_data=f"positions:page:{total_pages}" if page < total_pages else "noop"),
        ])

    rows.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="adm-pos:add")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back-admin-main")])

    return InlineKeyboardMarkup(inline_keyboard=rows)


def admin_pos_detail(pid: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"adm-pos:edit-title:{pid}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"adm-pos:edit-price:{pid}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"adm-pos:edit-qty:{pid}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å", callback_data=f"adm-pos:edit-weight:{pid}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥–∞–±–∞—Ä–∏—Ç—ã", callback_data=f"adm-pos:edit-dims:{pid}")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"adm-pos:delete:{pid}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm-pos:back-list")],
    ])


def admin_confirm_delete(pid: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–ê", callback_data=f"adm-pos:delete-yes:{pid}")],
        [InlineKeyboardButton(text="–û–°–¢–ê–í–ò–¢–¨", callback_data=f"adm-pos:{pid}")],
    ])


def admin_edit_back(pid: int | None = None) -> InlineKeyboardMarkup:
    cb = f"adm-pos:{pid}" if pid else "positions"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=cb)]
    ])


def get_admin_orders_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="adm-orders:active")],
        [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ", callback_data="adm-orders:finished")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back-admin-main")],
    ])


def get_admin_orders_list_kb(
        orders: list[dict],
        finished: bool,
        page: int = 1,
        page_size: int = 50,
) -> InlineKeyboardMarkup:
    total = len(orders)
    total_pages = max(1, ceil(total / page_size))
    page = max(1, min(page, total_pages))  # clamp

    start = (page - 1) * page_size
    end = start + page_size
    page_orders = orders[start:end]

    status_token = "finished" if finished else "active"
    suffix = "fin" if finished else "act"

    rows: list[list[InlineKeyboardButton]] = [
        [
            InlineKeyboardButton(
                text=f"#{o['id']} ({o['registration_date']:%d.%m})",
                callback_data=f"adm-order:{o['id']}:{suffix}",
            )
        ]
        for o in page_orders
    ]

    if total_pages > 1:
        prev_page = page - 1 if page > 1 else 1
        next_page = page + 1 if page < total_pages else total_pages
        rows.append([
            InlineKeyboardButton(text="¬´", callback_data=f"adm-orders:page:{status_token}:1" if page > 1 else "noop"),
            InlineKeyboardButton(text="‚Äπ",
                                 callback_data=f"adm-orders:page:{status_token}:{prev_page}" if page > 1 else "noop"),
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop"),
            InlineKeyboardButton(text="‚Ä∫",
                                 callback_data=f"adm-orders:page:{status_token}:{next_page}"
                                 if page < total_pages else "noop"),
            InlineKeyboardButton(text="¬ª",
                                 callback_data=f"adm-orders:page:{status_token}:{total_pages}"
                                 if page < total_pages else "noop"),
        ])

    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm-orders:menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def admin_order_detail_kb(order: dict, *, suffix: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.
    """
    builder = InlineKeyboardBuilder()
    status = order["status"]
    delivery_way = order["delivery_way"]
    order_id = order["id"]

    # --- –ù–û–í–ê–Ø, –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ö–ù–û–ü–û–ö ---

    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ (S_PROCESSING),
    # –∞–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∏—Ç—å, —á—Ç–æ —Å –Ω–∏–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ.
    if status == S_PROCESSING:
        if delivery_way == "pickup":
            # –î–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–º–µ—Ç–∏—Ç—å "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"
            builder.button(
                text="‚úÖ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
                callback_data=f"adm-order:advance:{S_READY}:{order_id}:{suffix}"
            )

    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É –∏–ª–∏ —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É,
    # –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ "–ó–∞–≤–µ—Ä—à–∏—Ç—å".
    if (status == S_READY and delivery_way == "pickup") or (status == S_TRANSFERRING and delivery_way == "delivery"):
        builder.button(
            text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑",
            callback_data=f"adm-order:advance:{S_FINISHED}:{order_id}:{suffix}"
        )

    # –û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –≤ –ø—É—Ç–∏ –∏ –Ω–µ –≥–æ—Ç–æ–≤
    if status in (S_WAITING, S_PROCESSING, S_READY):
        builder.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
            callback_data=f"adm-order:cancel:{order_id}:{suffix}"
        )

    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–∫–∞–∑ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if delivery_way == "delivery" and status not in (S_FINISHED, S_CANCELLED):
        builder.button(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
            callback_data=f"delivery:refresh:{order_id}"
        )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å—Ç—å –≤—Å–µ–≥–¥–∞
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"adm-orders:back-list:{suffix}")

    builder.adjust(1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()


def admin_cancel_confirm_kb(order_id: int, suffix: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–ê", callback_data=f"adm-order:cancel-yes:{order_id}:{suffix}")],
        [InlineKeyboardButton(text="–û–°–¢–ê–í–ò–¢–¨", callback_data=f"adm-order:{order_id}:{suffix}")],
    ])


def notify_cancel_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel-fsm-admin")]
    ])


def notify_confirm_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å", callback_data="notify:send")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="notify:redo")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel-fsm-admin")],
    ])


def admin_warehouse_detail_kb(warehouse_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞."""
    builder = InlineKeyboardBuilder()

    builder.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"wh:edit:name:{warehouse_id}")
    builder.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ê–¥—Ä–µ—Å", callback_data=f"wh:edit:address:{warehouse_id}")
    builder.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ü–æ–¥—ä–µ–∑–¥", callback_data=f"wh:edit:porch:{warehouse_id}")
    builder.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –≠—Ç–∞–∂", callback_data=f"wh:edit:floor:{warehouse_id}")
    builder.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ö–≤./–û—Ñ–∏—Å", callback_data=f"wh:edit:apartment:{warehouse_id}")
    builder.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ", callback_data=f"wh:edit:contact_name:{warehouse_id}")
    builder.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –¢–µ–ª–µ—Ñ–æ–Ω", callback_data=f"wh:edit:contact_phone:{warehouse_id}")
    # --- –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê ---
    builder.button(text="üìç –û–±–Ω–æ–≤–∏—Ç—å –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", callback_data=f"wh:edit:location:{warehouse_id}")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="back-admin-main")
    builder.adjust(1)
    return builder.as_markup()


def admin_create_warehouse_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –ø—Ä–µ–¥–ª–∞–≥–∞—é—â–∞—è —Å–æ–∑–¥–∞—Ç—å —Å–∫–ª–∞–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–∫–ª–∞–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="wh:create")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="back-admin-main")
    builder.adjust(1)
    return builder.as_markup()


def admin_manage_admins_kb(admins: list[dict]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    builder = InlineKeyboardBuilder()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
    for admin in admins:
        builder.button(
            text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {admin['full_name']} ({admin['id']})",
            callback_data=f"admin:manage:delete:{admin['id']}"
        )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin:manage:add")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="back-admin-main")

    builder.adjust(1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()


def admin_confirm_delete_admin_kb(user_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —è —É–≤–µ—Ä–µ–Ω", callback_data=f"admin:manage:delete_confirm:{user_id}")
    builder.button(text="‚¨ÖÔ∏è –ù–µ—Ç, –Ω–∞–∑–∞–¥", callback_data="admin:manage")
    builder.adjust(1)
    return builder.as_markup()


def admin_manage_add_back_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –¥–ª—è –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:manage")
    return builder.as_markup()
