from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


def get_main_inline_keyboard(is_admin: bool):
    buttons = [
        [InlineKeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my-orders")],
        [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="create-order")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="change-profile")],
    ]
    if is_admin:
        buttons = [
            [InlineKeyboardButton(text="–ü–æ–∑–∏—Ü–∏–∏", callback_data="positions")],
            [InlineKeyboardButton(text="–ó–∞–∫–∞–∑—ã", callback_data="orders")],
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º", callback_data="send-notification")],
        ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_orders_inline_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="orders-active")],
            [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ", callback_data="orders-finished")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back-main")],
        ]
    )


def get_orders_list_kb(orders: list, finished: bool):
    suffix = "fin" if finished else "act"
    kb = [
        [InlineKeyboardButton(
            text=f"#{o.id} ({o.registration_date:%d.%m})",  # TODO: –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            callback_data=f"order:{o.id}:{suffix}"
        )] for o in orders
    ]
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back-orders-menu:{suffix}")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


def get_order_detail_kb(order):
    finished = order.status in ("finished", "cancelled")
    suffix = "fin" if finished else "act"

    rows: list[list[InlineKeyboardButton]] = []
    if not finished:
        rows.append([InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞", callback_data=f"order-cancel:{order.id}:{suffix}"
        )])

    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back-to-list:{suffix}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def get_cancel_confirm_kb(order_id: int, suffix: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–ê", callback_data=f"cancel-yes:{order_id}:{suffix}")],
            [InlineKeyboardButton(text="–û–°–¢–ê–í–ò–¢–¨", callback_data=f"cancel-no:{order_id}:{suffix}")],
        ]
    )


def get_all_products(products: list[dict], cart: dict[int, int]) -> InlineKeyboardMarkup:
    rows = []
    for p in products:
        pid = p["id"]
        qty = cart.get(pid, 0)
        check = "‚úÖ" if qty > 0 else "üü©"
        title = f"{check} {p['title']} ‚Äî {p['price']} —Ä—É–±."

        toggle_cb = f"cart:toggle:{pid}" if p["quantity"] > 0 else "noop"
        rows.append([InlineKeyboardButton(text=title, callback_data=toggle_cb)])

        if qty > 0:
            minus_cb = f"cart:sub:{pid}"
            plus_cb = f"cart:add:{pid}" if qty < p["quantity"] else "noop"
            rows.append([
                InlineKeyboardButton(text="‚ûñ", callback_data=minus_cb),
                InlineKeyboardButton(text=f"{qty} —à—Ç (–¥–æ—Å—Ç—É–ø–Ω–æ {p['quantity']})", callback_data="noop"),
                InlineKeyboardButton(text="‚ûï", callback_data=plus_cb),
            ])

    rows.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="cart:done")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back-main")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def choice_of_delivery() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="del:pickup")],
        [InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞", callback_data="del:delivery")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cart:back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def delivery_address_select(saved: str | None) -> InlineKeyboardMarkup:
    rows = []
    if saved:
        rows.append([InlineKeyboardButton(text=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å: {saved}", callback_data="addr:use_saved")])
    rows.append([InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é", callback_data="addr:enter")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="addr:back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def confirm_create_order(bonuses: int, used_bonuses: int) -> InlineKeyboardMarkup:
    rows = []
    if bonuses > 0 and used_bonuses == 0:
        rows.append([
            InlineKeyboardButton(text=f"–°–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å—ã ({bonuses} ‚ÇΩ)", callback_data="bonus:use"),

        ])
    else:
        rows.append([
            InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –±–æ–Ω—É—Å—ã", callback_data="bonus:skip"),
        ])
    rows.append([InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm:ok")])
    rows.append([InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="confirm:restart")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="addr:back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def get_profile_inline_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é", callback_data="profile:edit-name")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="profile:edit-phone")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back-main")],
    ])
