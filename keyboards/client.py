from math import ceil

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.models.buyer_orders import BuyerOrders


def get_main_inline_keyboard(is_admin: bool):
    buttons = [
        [InlineKeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my-orders")],
        [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="create-order")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="change-profile")],
    ]
    if is_admin:
        buttons = [
            [InlineKeyboardButton(text="–ü–æ–∑–∏—Ü–∏–∏", callback_data="positions")],
            [InlineKeyboardButton(text="–ó–∞–∫–∞–∑—ã", callback_data="orders")],
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º", callback_data="send-notification")],
            [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="delivery-settings")],
            [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin:manage")],
        ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_orders_inline_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="orders-active")],
            [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ", callback_data="orders-finished")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back-main")],
        ]
    )


def get_orders_list_kb(
        orders: list,
        finished: bool,
        page: int = 1,
        page_size: int = 50,
) -> InlineKeyboardMarkup:
    total = len(orders)
    total_pages = max(1, ceil(total / page_size))
    page = max(1, min(page, total_pages))  # clamp

    start = (page - 1) * page_size
    end = start + page_size
    page_orders = orders[start:end]

    suffix = "fin" if finished else "act"

    kb: list[list[InlineKeyboardButton]] = [
        [InlineKeyboardButton(
            text=f"#{o.id} ({o.registration_date:%d.%m})",  # TODO: –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            callback_data=f"order:{o.id}:{suffix}"
        )]
        for o in page_orders
    ]

    if total_pages > 1:
        prev_page = page - 1 if page > 1 else 1
        next_page = page + 1 if page < total_pages else total_pages
        kb.append([
            InlineKeyboardButton(text="¬´", callback_data=f"orders:page:{suffix}:1" if page > 1 else "noop"),
            InlineKeyboardButton(text="‚Äπ", callback_data=f"orders:page:{suffix}:{prev_page}" if page > 1 else "noop"),
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop"),
            InlineKeyboardButton(text="‚Ä∫",
                                 callback_data=f"orders:page:{suffix}:{next_page}" if page < total_pages else "noop"),
            InlineKeyboardButton(text="¬ª",
                                 callback_data=f"orders:page:{suffix}:{total_pages}" if page < total_pages else "noop"),
        ])

    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back-orders-menu:{suffix}")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


def get_order_detail_kb(order: BuyerOrders) -> InlineKeyboardMarkup:  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –æ–±—ä–µ–∫—Ç
    builder = InlineKeyboardBuilder()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å–µ
    if order.delivery_way.value == 'delivery' and order.yandex_claim_id and order.status.value not in (
            'finished', 'cancelled'):
        builder.button(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
            callback_data=f"delivery:refresh:{order.id}")

    if order.status.value not in ('finished', 'cancelled'):
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞", callback_data=f"order-cancel:{order.id}:act")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                   callback_data=f"back-to-list:{'fin' if order.status.value in ('finished', 'cancelled') else 'act'}")

    builder.adjust(1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()


def get_cancel_confirm_kb(order_id: int, suffix: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–ê", callback_data=f"cancel-yes:{order_id}:{suffix}")],
            [InlineKeyboardButton(text="–û–°–¢–ê–í–ò–¢–¨", callback_data=f"cancel-no:{order_id}:{suffix}")],
        ]
    )


def get_all_products(
        products: list[dict],
        cart: dict[int, int],
        page: int = 1,
        page_size: int = 20,
) -> InlineKeyboardMarkup:
    total = len(products)
    total_pages = max(1, ceil(total / page_size))
    page = max(1, min(page, total_pages))  # clamp

    start = (page - 1) * page_size
    end = start + page_size
    page_products = products[start:end]

    rows: list[list[InlineKeyboardButton]] = []

    for p in page_products:
        pid = p["id"]
        qty = cart.get(pid, 0)
        check = "‚úÖ" if qty > 0 else "üü©"
        title = f"{check} {p['title']}, {p['weight_kg']} –∫–≥ ‚Äî {p['price']} —Ä—É–±."

        toggle_cb = f"cart:toggle:{pid}" if p["quantity"] > 0 else "noop"
        rows.append([InlineKeyboardButton(text=title, callback_data=toggle_cb)])

        if qty > 0:
            minus_cb = f"cart:sub:{pid}"
            plus_cb = f"cart:add:{pid}" if qty < p["quantity"] else "noop"
            rows.append([
                InlineKeyboardButton(text="‚ûñ", callback_data=minus_cb),
                InlineKeyboardButton(
                    text=f"{qty} —à—Ç (–¥–æ—Å—Ç—É–ø–Ω–æ {p['quantity']})",
                    callback_data="noop"
                ),
                InlineKeyboardButton(text="‚ûï", callback_data=plus_cb),
            ])

    if total_pages > 1:
        prev_page = page - 1 if page > 1 else 1
        next_page = page + 1 if page < total_pages else total_pages
        rows.append([
            InlineKeyboardButton(text="¬´", callback_data="cart:page:1" if page > 1 else "noop"),
            InlineKeyboardButton(text="‚Äπ", callback_data=f"cart:page:{prev_page}" if page > 1 else "noop"),
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop"),
            InlineKeyboardButton(text="‚Ä∫", callback_data=f"cart:page:{next_page}" if page < total_pages else "noop"),
            InlineKeyboardButton(text="¬ª", callback_data=f"cart:page:{total_pages}" if page < total_pages else "noop"),
        ])

    rows.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="cart:done")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back-main")])

    return InlineKeyboardMarkup(inline_keyboard=rows)


def choice_of_delivery() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="del:pickup")],
        [InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞", callback_data="del:delivery")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cart:back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def delivery_address_select(saved: str | None) -> InlineKeyboardMarkup:
    rows = []
    if saved:
        rows.append([InlineKeyboardButton(text=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å: {saved}", callback_data="addr:use_saved")])
    rows.append([InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é", callback_data="addr:enter")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cart:back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def confirm_create_order(bonuses: int,
                         used_bonus: int,
                         total_sum: float,
                         has_comment: bool)-> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    :param bonuses: –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param used_bonus: –°–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–æ–≤ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ –∑–∞–∫–∞–∑—É.
    :param total_sum: –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ (—Ç–æ–≤–∞—Ä—ã + –¥–æ—Å—Ç–∞–≤–∫–∞).
    """
    builder = InlineKeyboardBuilder()

    comment_text = "üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" if has_comment else "üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
    builder.button(text=comment_text, callback_data="order:add_comment")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
    builder.button(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å",
        callback_data="confirm:ok"
    )
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
        callback_data="confirm:restart"
    )

    # –£–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –±–æ–Ω—É—Å–æ–≤:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –±–æ–Ω—É—Å—ã –ò –µ—Å—Ç—å –Ω–∞ —á—Ç–æ –∏—Ö —Ç—Ä–∞—Ç–∏—Ç—å (—Å—É–º–º–∞ > 0)
    if bonuses > 0 and total_sum > 0:
        if used_bonus > 0:
            # –ï—Å–ª–∏ –±–æ–Ω—É—Å—ã —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Ö –æ—Ç–º–µ–Ω–∏—Ç—å
            builder.button(
                text=f"–ù–µ —Å–ø–∏—Å—ã–≤–∞—Ç—å –±–æ–Ω—É—Å—ã ({used_bonus} ‚ÇΩ)",
                callback_data="bonus:skip"
            )
        else:
            # –ï—Å–ª–∏ –±–æ–Ω—É—Å—ã –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Ö —Å–ø–∏—Å–∞—Ç—å
            builder.button(
                text=f"üí∏ –°–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å—ã ({bonuses} ‚ÇΩ)",
                callback_data="bonus:use"
            )

    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏: 2 –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, 1 (–µ—Å–ª–∏ –µ—Å—Ç—å) –≤–æ –≤—Ç–æ—Ä–æ–π.
    builder.adjust(1,2, 1)

    return builder.as_markup()


def get_profile_inline_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é", callback_data="profile:edit-name")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="profile:edit-phone")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back-main")],
    ])


def cancel_payment(amount_to_pay: int, order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {amount_to_pay} RUB",
                pay=True
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data=f"cancel_invoice:{order_id}"
            )
        ]
    ])


def back_to_delivery_choice_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="cart:back")
    return builder.as_markup()


def confirm_geoposition_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≥–µ–æ—Ç–æ—á–∫–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ", callback_data="geo:confirm")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cart:back")
    builder.adjust(2, 1)
    return builder.as_markup()
