from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery

import keyboards.client
from database.managers.buyer_info_manager import BuyerInfoManager
from database.managers.buyer_order_manager import BuyerOrderManager
from database.managers.product_position_manager import ProductPositionManager
from database.managers.user_info_manager import UserInfoManager
from keyboards.client import (
    get_main_inline_keyboard,
    get_orders_inline_keyboard,
    get_orders_list_kb,
    get_order_detail_kb,
    get_cancel_confirm_kb,
    get_all_products,
    choice_of_delivery,
    delivery_address_select,
    confirm_create_order, get_profile_inline_keyboard
)
from utils.config import PAYMENT_TOKEN
from utils.constants import status_map, delivery_map
from utils.logger import get_logger
from utils.phone import normalize_phone
from utils.secrets import get_admin_ids

MIN_PAYMENT_AMOUNT = 60

log = get_logger("[Bot.Client]")

client_router = Router()


async def handle_telegram_error(
        e: TelegramBadRequest,
        message: Message = None,
        call: CallbackQuery = None,
        state: FSMContext = None
) -> bool:
    error_text = str(e).lower()

    if "message is not modified" in error_text:
        log.debug("[Bot.Client] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ (message is not modified)")
        return True

    if (
            "message to delete not found" in error_text
            or "message can't be deleted" in error_text
            or "message to edit not found" in error_text
    ):
        if state:
            await state.clear()
            log.debug("[Bot.Client] FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Telegram")

        user = call.from_user if call else message.from_user if message else None
        is_admin = user and user.id in get_admin_ids()

        target = call.message if call else message if message else None
        if target:
            await target.answer(
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_inline_keyboard(is_admin)
            )
            log.info(f"[Bot.Client] –û—à–∏–±–∫–∞ Telegram –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id if user else 'unknown'}")
        return True

    log.warning(f"[Bot.Client] [UNHANDLED TelegramBadRequest] {e}")
    return False


class Registration(StatesGroup):
    full_name = State()
    phone = State()


class CreateOrder(StatesGroup):
    choose_products = State()
    choose_delivery = State()
    enter_address = State()
    confirm = State()
    waiting_payment = State()


class ProfileEdit(StatesGroup):
    full_name = State()
    phone = State()


def register_client(dp):
    dp.include_router(client_router)


@client_router.message(CommandStart())
async def client_start(message: Message, state: FSMContext, user_info_manager: UserInfoManager,
                       buyer_info_manager: BuyerInfoManager):
    log.info(f"[Bot.Client] –ù–æ–≤—ã–π —Å—Ç–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    user_id = await user_info_manager.add_user(message.from_user.id)

    is_admin = message.from_user.id in get_admin_ids()
    if not is_admin:
        is_registered = await buyer_info_manager.is_registered(user_id)
        if is_registered:
            bonuses = await buyer_info_manager.get_user_bonuses_by_id(user_id)
            await message.answer(
                text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: \n"
                     f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: `{bonuses if bonuses else 0}` —Ä—É–±.",
                parse_mode="Markdown",
                reply_markup=get_main_inline_keyboard(is_admin)
            )
            return
    else:
        await message.answer(
            text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: \n",
            reply_markup=get_main_inline_keyboard(is_admin)
        )
        return

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, –Ω–æ–≤—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å! –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n"
        "–í–≤–µ–¥–∏—Ç–µ *–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é*:",
        parse_mode="Markdown",
    )
    await state.set_state(Registration.full_name)


@client_router.message(Registration.full_name)
async def reg_get_fullname(message: Message, state: FSMContext) -> None:
    full_name: str = message.text.strip()

    log.info(f"[Bot.Client] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–æ–¥–∏—Ç –∏–º—è {full_name}")

    if len(full_name.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ *–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é* —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        return

    await state.update_data(full_name=full_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ `+77771234567` –∏–ª–∏ `87771234567`:",
        parse_mode="Markdown",
    )
    await state.set_state(Registration.phone)


@client_router.message(Registration.phone)
async def reg_get_phone(
        message: Message,
        state: FSMContext,
        buyer_info_manager,
) -> None:
    phone_e164 = normalize_phone(message.text)

    log.info(f"[Bot.Client] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–æ–¥–∏—Ç –∏–º—è {phone_e164}")

    if phone_e164 is None:
        await message.answer(
            "–¢–µ–ª–µ—Ñ–æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. "
            "–£–∫–∞–∂–∏—Ç–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â—ë —Ä–∞–∑ (–ø—Ä–∏–º–µ—Ä: +77771234567):"
        )
        return

    data = await state.get_data()
    full_name: str = data["full_name"]
    tg_user_id = message.from_user.id

    await buyer_info_manager.create_buyer_info(
        tg_user_id=tg_user_id,
        name_surname=full_name,
        tel_num=phone_e164,
        tg_username=message.from_user.username,
    )

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üôå\n–í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_inline_keyboard(is_admin=False),
    )
    log.info(f"[Bot.Client] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!")
    await state.clear()


@client_router.callback_query(F.data == "my-orders")
async def cb_my_orders(call: CallbackQuery, buyer_order_manager) -> None:
    await call.answer()
    tg_user_id = call.from_user.id
    log.info(f"[Bot.Client] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_user_id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã")

    active_cnt = await buyer_order_manager.count_active_orders_by_tg(tg_user_id)
    total_cnt = await buyer_order_manager.count_total_orders_by_tg(tg_user_id)

    await call.message.edit_text(
        f"–ö–æ–ª-–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{active_cnt}` \n–û–±—â–µ–µ –∫–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤: `{total_cnt}`",
        reply_markup=get_orders_inline_keyboard(),
        parse_mode="Markdown"
    )


@client_router.callback_query(F.data == "back-main")
async def cb_back_main(call: CallbackQuery, buyer_info_manager):
    await call.answer()
    is_admin = call.from_user.id in get_admin_ids()
    bonuses = await buyer_info_manager.get_user_bonuses_by_tg(call.from_user.id)
    try:
        await call.message.edit_text(
            text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: \n"
                 f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: `{bonuses if bonuses else 0}` —Ä—É–±.",
            parse_mode="Markdown",
            reply_markup=get_main_inline_keyboard(is_admin),
        )
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


@client_router.callback_query(F.data == "orders-active")
async def show_active_list(call: CallbackQuery, buyer_order_manager):
    await call.answer()
    tg = call.from_user.id
    orders = await buyer_order_manager.list_orders(tg_user_id=tg, finished=False)
    cnt = len(orders)
    text = f"–ö–æ–ª-–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{cnt}`"

    try:
        await call.message.edit_text(
            text, parse_mode="Markdown",
            reply_markup=get_orders_list_kb(orders, finished=False)
        )
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


@client_router.callback_query(F.data == "orders-finished")
async def show_finished_list(call: CallbackQuery, buyer_order_manager):
    await call.answer()
    tg = call.from_user.id
    orders = await buyer_order_manager.list_orders(tg_user_id=tg, finished=True)
    cnt = len(orders)
    text = f"–ö–æ–ª-–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{cnt}`"

    try:
        await call.message.edit_text(
            text, parse_mode="Markdown",
            reply_markup=get_orders_list_kb(orders, finished=True)
        )
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


@client_router.callback_query(F.data.startswith("order:"))
async def order_detail(call: CallbackQuery, buyer_order_manager):
    await call.answer()
    _, oid, kind = call.data.split(":")  # kind = act | fin
    order = await buyer_order_manager.get_order(call.from_user.id, int(oid))
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    items = await buyer_order_manager.list_items_by_order_id(order.id)
    if items:
        lines = [
            f"‚Ä¢ {it.title} √ó{it.qty} ‚Äî `{it.price * it.qty}`‚ÇΩ"
            for it in items
        ]
        items_text = "\n".join(lines)
    else:
        items_text = "_–ø—É—Å—Ç–æ_"

    total = await buyer_order_manager.order_total_sum_by_order_id(order.id)

    status_txt = status_map[order.status.value]
    delivery_txt = delivery_map[order.delivery_way.value]

    text = (
        f"*–ó–∞–∫–∞–∑ ‚Ññ{order.id}*\n\n"
        f"*–¢–æ–≤–∞—Ä—ã:*\n{items_text}\n\n"
        f"*–ò—Ç–æ–≥–æ:* `{total} ‚ÇΩ`\n"
        f"*–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:* {delivery_txt}\n"
        f"*–°—Ç–∞—Ç—É—Å:* {status_txt}\n"
        f"*–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:* {order.registration_date:%d.%m.%Y}"
    )
    if order.delivery_date:
        text += f"\n*–ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:* {order.delivery_date:%d.%m.%Y}"

    try:
        await call.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=get_order_detail_kb(order),
        )
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


@client_router.callback_query(F.data.startswith("cancel-no:"))
async def cancel_no(call: CallbackQuery, buyer_order_manager):
    _, order_id, suffix = call.data.split(":")
    order = await buyer_order_manager.get_order(call.from_user.id, int(order_id))
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ —É–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    items = await buyer_order_manager.list_items_by_order_id(order.id)
    if items:
        lines = [
            f"‚Ä¢ {it.title} √ó{it.qty} ‚Äî `{it.price * it.qty}`‚ÇΩ"
            for it in items
        ]
        items_text = "\n".join(lines)
    else:
        items_text = "_–ø—É—Å—Ç–æ_"

    total = await buyer_order_manager.order_total_sum_by_order_id(order.id)

    status_txt = status_map[order.status.value]
    delivery_txt = delivery_map[order.delivery_way.value]

    text = (
        f"*–ó–∞–∫–∞–∑ ‚Ññ{order.id}*\n\n"
        f"*–¢–æ–≤–∞—Ä—ã:*\n{items_text}\n\n"
        f"*–ò—Ç–æ–≥–æ:* `{total} ‚ÇΩ`\n"
        f"*–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:* {delivery_txt}\n"
        f"*–°—Ç–∞—Ç—É—Å:* {status_txt}\n"
        f"*–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:* {order.registration_date:%d.%m.%Y}"
    )
    if order.delivery_date:
        text += f"\n*–ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:* {order.delivery_date:%d.%m.%Y}"

    try:
        await call.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=get_order_detail_kb(order),
        )
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


@client_router.callback_query(F.data.startswith("order-cancel:"))
async def order_cancel_init(call: CallbackQuery):
    _, order_id, suffix = call.data.split(":")
    await call.answer()
    try:
        await call.message.edit_text(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?",
            reply_markup=get_cancel_confirm_kb(int(order_id), suffix),
        )
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


@client_router.callback_query(F.data.startswith("cancel-yes:"))
async def order_cancel_yes(call: CallbackQuery, buyer_order_manager):
    order_id = int(call.data.split(":")[1])
    await buyer_order_manager.cancel_order(order_id)

    await call.answer("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω!", show_alert=True)

    orders = await buyer_order_manager.list_orders(
        tg_user_id=call.from_user.id, finished=False
    )
    header = f"–ö–æ–ª-–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{len(orders)}`"

    try:
        await call.message.edit_text(
            header,
            parse_mode="Markdown",
            reply_markup=get_orders_list_kb(orders, finished=False)
        )
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


@client_router.callback_query(F.data.startswith("back-to-list:"))
async def back_to_list(call: CallbackQuery, buyer_order_manager):
    await call.answer()
    suffix = call.data.split(":")[1]
    finished = suffix == "fin"

    orders = await buyer_order_manager.list_orders(
        tg_user_id=call.from_user.id,
        finished=finished,
    )
    cnt = len(orders)
    header = (
        f"–ö–æ–ª-–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{cnt}`"
        if not finished else
        f"–ö–æ–ª-–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{cnt}`"
    )

    try:
        await call.message.edit_text(
            header,
            parse_mode="Markdown",
            reply_markup=get_orders_list_kb(orders, finished)
        )
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


@client_router.callback_query(F.data.startswith("back-orders-menu:"))
async def back_orders_menu(call: CallbackQuery, buyer_order_manager):
    await call.answer()

    tg_id = call.from_user.id
    active_cnt = await buyer_order_manager.count_active_orders_by_tg(tg_id)
    total_cnt = await buyer_order_manager.count_total_orders_by_tg(tg_id)

    header = (
        f"–ö–æ–ª-–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{active_cnt}`\n"
        f"–û–±—â–µ–µ –∫–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤: `{total_cnt}`"
    )

    try:
        await call.message.edit_text(
            header,
            parse_mode="Markdown",
            reply_markup=get_orders_inline_keyboard(),
        )
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


def _text_cart_preview(items: list[dict], total: int, delivery_way: str, address: str | None,
                       used_bonus: int = 0) -> str:
    lines = ["*–í—ã –≤—ã–±—Ä–∞–ª–∏:*"]
    for it in items:
        lines.append(f"‚Ä¢ {it['title']} √ó{it['qty']} ‚Äî {it['price'] * it['qty']} ‚ÇΩ")
    lines.append(f"\n–ë–æ–Ω—É—Å–æ–≤ —Å–ø–∏—Å–∞–Ω–æ: `{used_bonus}`")
    lines.append(f"–ö –æ–ø–ª–∞—Ç–µ: `{total - used_bonus} ‚ÇΩ`")
    lines.append(f"–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: *{'–î–æ—Å—Ç–∞–≤–∫–∞' if delivery_way == 'delivery' else '–°–∞–º–æ–≤—ã–≤–æ–∑'}*")
    if delivery_way == "delivery":
        lines.append(f"–ê–¥—Ä–µ—Å: {address or '‚Äî'}")
    return "\n".join(lines)


@client_router.callback_query(F.data == "create-order")
async def start_create(call: CallbackQuery, state: FSMContext, product_position_manager):
    await call.answer()
    await state.update_data(cart={})

    products = await product_position_manager.list_not_empty_order_positions()  # [{id,title,price,quantity}, ...]
    await state.set_state(CreateOrder.choose_products)
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:",
        reply_markup=get_all_products(products, cart={})
    )


@client_router.callback_query(CreateOrder.choose_delivery, F.data == "cart:back")
async def back_from_delivery_to_cart(call: CallbackQuery, state: FSMContext, product_position_manager):
    data = await state.get_data()
    cart: dict[int, int] = data.get("cart", {})
    products = await product_position_manager.list_not_empty_order_positions()

    await state.set_state(CreateOrder.choose_products)
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:",
        reply_markup=get_all_products(products, cart)
    )
    await call.answer()


@client_router.callback_query(CreateOrder.choose_products, F.data.startswith("cart:"))
async def cart_ops(call: CallbackQuery, state: FSMContext, product_position_manager):
    products = await product_position_manager.list_not_empty_order_positions()
    data = await state.get_data()
    cart: dict[int, int] = data.get("cart", {})

    action, *rest = call.data.split(":")[1:]
    if action == "done":
        if not cart:
            await call.answer(text="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
            return
        await state.update_data(cart=cart)
        await state.set_state(CreateOrder.choose_delivery)
        await call.message.edit_text("–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:", reply_markup=choice_of_delivery())
        return

    pid = int(rest[0])
    stock_map = {p["id"]: p["quantity"] for p in products}
    qty = cart.get(pid, 0)

    if action == "toggle":
        cart.pop(pid, None) if qty > 0 else cart.__setitem__(pid, 1)
    elif action == "add":
        new_qty = min(qty + 1, stock_map.get(pid, 0))
        cart[pid] = new_qty
    elif action == "sub":
        new_qty = max(qty - 1, 0)
        if new_qty == 0:
            cart.pop(pid, None)
        else:
            cart[pid] = new_qty

    await state.update_data(cart=cart)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:", reply_markup=get_all_products(products, cart))


@client_router.callback_query(CreateOrder.choose_delivery, F.data.startswith("del:"))
async def choose_delivery(call: CallbackQuery, state: FSMContext, buyer_info_manager, product_position_manager):
    await call.answer()
    arg = call.data.split(":")[1]
    await state.update_data(delivery_way="pickup" if arg == "pickup" else "delivery")

    if arg == "pickup":
        await go_confirm(call, state, buyer_info_manager, product_position_manager)
    else:
        saved = await buyer_info_manager.get_address_by_tg(call.from_user.id)
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π:",
                                     reply_markup=delivery_address_select(saved))


@client_router.callback_query(F.data == "addr:back")
async def back_from_address_to_delivery(call: CallbackQuery, state: FSMContext):
    await state.set_state(CreateOrder.choose_delivery)
    await call.message.edit_text("–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:", reply_markup=choice_of_delivery())
    await call.answer()


@client_router.callback_query(CreateOrder.choose_delivery, F.data.startswith("addr:"))
async def address_flow(call: CallbackQuery, state: FSMContext, buyer_info_manager, product_position_manager):
    await call.answer()
    arg = call.data.split(":")[1]
    if arg == "use_saved":
        saved = await buyer_info_manager.get_address_by_tg(call.from_user.id)
        await state.update_data(address=saved or "")
        await go_confirm(call, state, buyer_info_manager, product_position_manager)
    elif arg == "enter":
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
        await state.set_state(CreateOrder.enter_address)


@client_router.message(CreateOrder.enter_address)
async def address_entered(msg: Message, state: FSMContext, buyer_info_manager, product_position_manager):
    addr = msg.text.strip()
    await state.update_data(address=addr)

    await buyer_info_manager.update_address_by_tg(msg.from_user.id, addr)
    await msg.answer("–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úîÔ∏è")
    await go_confirm(msg, state, buyer_info_manager, product_position_manager)


async def go_confirm(target: Message | CallbackQuery, state: FSMContext, buyer_info_manager, product_position_manager):
    data = await state.get_data()
    cart: dict[int, int] = data["cart"]
    delivery_way: str = data.get("delivery_way", "pickup")
    address: str | None = data.get("address")

    items = []
    total = 0

    products = await product_position_manager.get_order_position_by_ids(list(cart.keys()))
    pmap = {p["id"]: p for p in products}
    for pid, q in cart.items():
        p = pmap[pid]
        items.append({"title": p["title"], "price": p["price"], "qty": q})
        total += p["price"] * q

    # –±–æ–Ω—É—Å—ã
    bonuses = await buyer_info_manager.get_user_bonuses_by_tg(
        target.from_user.id if isinstance(target, CallbackQuery) else target.from_user.id
    )

    used_bonus = data.get("used_bonus", 0)
    await state.update_data(total=total, bonuses=bonuses, used_bonus=used_bonus)

    text = _text_cart_preview(items, total, delivery_way, address, used_bonus)
    kb = confirm_create_order(bonuses, used_bonus)
    if isinstance(target, CallbackQuery):
        try:
            await target.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
        except TelegramBadRequest as e:
            log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await handle_telegram_error(e, call=target)
    else:
        await target.answer(text, parse_mode="Markdown", reply_markup=kb)
    await state.set_state(CreateOrder.confirm)


@client_router.callback_query(CreateOrder.confirm, F.data.in_({"bonus:use", "bonus:skip"}))
async def confirm_bonus(call: CallbackQuery, state: FSMContext, buyer_info_manager, product_position_manager):
    data = await state.get_data()
    if call.data.endswith("use"):
        used = min(data["bonuses"], data["total"])
        await state.update_data(used_bonus=used)
        await call.answer(f"–°–ø–∏—Å—ã–≤–∞–µ–º {used} ‚ÇΩ –±–æ–Ω—É—Å–æ–≤", show_alert=True)
    else:
        await call.answer()
        await state.update_data(used_bonus=0)
    await go_confirm(call, state, buyer_info_manager, product_position_manager)


@client_router.callback_query(CreateOrder.confirm, F.data == "confirm:restart")
async def confirm_restart(call: CallbackQuery, state: FSMContext, product_position_manager):
    await call.answer()
    await state.update_data(cart={})
    products = await product_position_manager.list_not_empty_order_positions()
    await state.set_state(CreateOrder.choose_products)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:", reply_markup=get_all_products(products, cart={}))


@client_router.callback_query(CreateOrder.confirm, F.data == "confirm:ok")
async def confirm_ok(
        call: CallbackQuery,
        state: FSMContext,
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ type hint'—ã –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        buyer_order_manager: BuyerOrderManager,
        product_position_manager: ProductPositionManager,
        buyer_info_manager: BuyerInfoManager  # <-- –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
):
    await call.answer()
    data = await state.get_data()
    cart: dict[int, int] = data["cart"]
    delivery_way: str = data.get("delivery_way", "pickup")
    address: str | None = data.get("address")
    used_bonus: int = data.get("used_bonus", 0)
    total: int = data.get("total", 0)

    # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ
    order_id, err = await buyer_order_manager.create_order(
        tg_user_id=call.from_user.id,
        items=cart, delivery_way=delivery_way, address=address, used_bonus=used_bonus
    )

    if not order_id:
        await call.message.answer(err or "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ
    amount_to_pay = total - used_bonus

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –∏ —Ä–µ—à–∞–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å
    if amount_to_pay >= MIN_PAYMENT_AMOUNT:
        # --- –°–õ–£–ß–ê–ô 1: –°—É–º–º–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –¥–ª—è –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã ---
        try:
            log.info(f"–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ —Å—É–º–º—É {amount_to_pay} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
            await call.message.delete()

            await call.bot.send_invoice(
                chat_id=call.from_user.id,
                title=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}",
                description="–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
                payload=f"order_payment:{order_id}",
                provider_token=PAYMENT_TOKEN,
                currency="RUB",
                prices=[LabeledPrice(label=f"–ó–∞–∫–∞–∑ ‚Ññ{order_id}", amount=int(amount_to_pay * 100))],
                reply_markup=keyboards.client.cancel_payment(amount_to_pay, order_id)
            )
            await state.set_state(CreateOrder.waiting_payment)

        except TelegramBadRequest as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
            await call.message.answer(
                "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É. "
                "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            await buyer_order_manager.cancel_order(order_id)
            await state.clear()

            is_admin = call.from_user.id in get_admin_ids()
            bonuses = await buyer_info_manager.get_user_bonuses_by_tg(call.from_user.id)
            await call.message.answer(
                text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: \n" f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: `{bonuses or 0}` —Ä—É–±.",
                parse_mode="Markdown",
                reply_markup=get_main_inline_keyboard(is_admin)
            )


    elif amount_to_pay > 0:

        # --- –°–õ–£–ß–ê–ô 2: –°—É–º–º–∞ > 0, –Ω–æ < –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ---

        log.info(f"–°—É–º–º–∞ {amount_to_pay} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞.")

        # 1. –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞—è —Ç–æ–≤–∞—Ä—ã –∏ –±–æ–Ω—É—Å—ã

        await buyer_order_manager.cancel_order(order_id)

        # 2. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

        await state.clear()

        # 3. –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π
        await call.message.answer(text=f"–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω: —Å—É–º–º–∞ {amount_to_pay} —Ä—É–±. —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã.")
        # 4. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        is_admin = call.from_user.id in get_admin_ids()
        bonuses = await buyer_info_manager.get_user_bonuses_by_tg(call.from_user.id)
        # 5. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–≤—Ä–∞—â–∞—è –µ–≥–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await call.message.edit_text(
            text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: \n"
                 f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: `{bonuses if bonuses else 0}` —Ä—É–±.",
            parse_mode="Markdown",
            reply_markup=get_main_inline_keyboard(is_admin)
        )

    else:
        # --- –°–õ–£–ß–ê–ô 3: –ó–∞–∫–∞–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—á–µ–Ω –±–æ–Ω—É—Å–∞–º–∏ ---
        log.info(f"–ó–∞–∫–∞–∑ #{order_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—á–µ–Ω –±–æ–Ω—É—Å–∞–º–∏.")
        await buyer_order_manager.mark_order_as_paid_by_bonus(order_id)
        await state.clear()
        await call.message.edit_text("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ–ø–ª–∞—á–µ–Ω –±–æ–Ω—É—Å–∞–º–∏. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ PreCheckoutQuery
@client_router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery, buyer_order_manager):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞)
    order_id = int(pre_checkout_query.invoice_payload.split(":")[1])
    log.info(f"–ü–æ–ª—É—á–µ–Ω pre-checkout –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂
    await pre_checkout_query.answer(ok=True)
    log.info(f"–û—Ç–≤–µ—Ç–∏–ª–∏ ok=True –Ω–∞ pre-checkout –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@client_router.message(F.successful_payment, CreateOrder.waiting_payment)
async def successful_payment_handler(message: Message, state: FSMContext, buyer_order_manager):
    payment_info = message.successful_payment
    order_id = int(payment_info.invoice_payload.split(":")[1])

    log.info(f"–û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ #{order_id} –Ω–∞ —Å—É–º–º—É {payment_info.total_amount / 100} "
             f"{payment_info.currency} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ "–æ–ø–ª–∞—á–µ–Ω"
    # –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ –≤–∞—à–µ–º `buyer_order_manager`
    await buyer_order_manager.mark_order_as_paid(order_id, payment_info)

    await message.answer(
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! ‚úÖ\n"
        f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏."
    )
    await state.clear()


@client_router.callback_query(F.data == "noop")
async def noop(call: CallbackQuery):
    await call.answer()


async def _render_profile_text(tg_id: int, buyer_info_manager) -> str:
    rec = await buyer_info_manager.get_profile_by_tg(tg_id)
    if not rec:
        return "–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    name = rec["name_surname"]
    phone = rec["tel_num"]
    return (
        "*–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ*\n\n"
        f"*–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è:* {name}\n"
        f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {phone}\n"
    )


async def show_profile_menu(target: Message | CallbackQuery, buyer_info_manager):
    tg_id = target.from_user.id if isinstance(target, CallbackQuery) else target.from_user.id
    await buyer_info_manager.upsert_username_by_tg(tg_id, target.from_user.username)
    text = await _render_profile_text(tg_id, buyer_info_manager)
    if isinstance(target, CallbackQuery):
        await target.message.edit_text(text, parse_mode="Markdown", reply_markup=get_profile_inline_keyboard())
        await target.answer()
    else:
        await target.answer(text, parse_mode="Markdown", reply_markup=get_profile_inline_keyboard())


@client_router.callback_query(F.data == "change-profile")
async def cb_open_profile(call: CallbackQuery, buyer_info_manager):
    await show_profile_menu(call, buyer_info_manager)


@client_router.callback_query(F.data == "profile:edit-name")
async def cb_edit_name(call: CallbackQuery, state: FSMContext):
    await state.set_state(ProfileEdit.full_name)
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ *–í–∞—à–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é* (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):",
        parse_mode="Markdown"
    )
    await call.answer()


@client_router.message(ProfileEdit.full_name)
async def msg_set_name(message: Message, state: FSMContext, buyer_info_manager):
    full_name = " ".join(message.text.split()).strip()
    if len(full_name.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ *–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é* —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.", parse_mode="Markdown")
        return
    await buyer_info_manager.update_full_name_by_tg(message.from_user.id, full_name)
    await state.clear()
    await message.answer("–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è *—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã* ‚úÖ", parse_mode="Markdown")
    await show_profile_menu(message, buyer_info_manager)


@client_router.callback_query(F.data == "profile:edit-phone")
async def cb_edit_phone(call: CallbackQuery, state: FSMContext):
    await state.set_state(ProfileEdit.phone)
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ *–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ `+77771234567`:",
        parse_mode="Markdown"
    )
    await call.answer()


@client_router.message(ProfileEdit.phone)
async def msg_set_phone(message: Message, state: FSMContext, buyer_info_manager):
    phone_e164 = normalize_phone(message.text)
    if phone_e164 is None:
        await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `+77771234567`.",
                             parse_mode="Markdown")
        return
    await buyer_info_manager.update_phone_by_tg(message.from_user.id, phone_e164)
    await state.clear()
    await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω* ‚úÖ", parse_mode="Markdown")
    await show_profile_menu(message, buyer_info_manager)


@client_router.callback_query(F.data.startswith("cancel_invoice:"))
async def cancel_payment_invoice(call: CallbackQuery, state: FSMContext, buyer_order_manager, buyer_info_manager):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞.
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–≤—Ä–∞—â–∞—è –µ–≥–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    order_id = int(call.data.split(":")[1])

    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏ –±–æ–Ω—É—Å—ã)
    await buyer_order_manager.cancel_order(order_id)

    await call.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω", show_alert=True)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()

    try:
        # 1. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—á–µ—Ç–æ–º, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        await call.message.delete()
    except TelegramBadRequest as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º –∫–ª–∏–∫–µ)
        log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å—á–µ—Ç–∞: {e}")

        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    is_admin = call.from_user.id in get_admin_ids()
    bonuses = await buyer_info_manager.get_user_bonuses_by_tg(call.from_user.id)

    await call.message.answer(
        text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: \n"
             f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: `{bonuses if bonuses else 0}` —Ä—É–±.",
        parse_mode="Markdown",
        reply_markup=get_main_inline_keyboard(is_admin)
    )
