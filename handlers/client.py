import logging
from math import ceil
from pathlib import Path

from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, InlineKeyboardMarkup, InlineKeyboardButton, \
    InputMediaPhoto, FSInputFile

from api.yandex_delivery import geocode_address, YandexDeliveryClient
from database.managers.buyer_info_manager import BuyerInfoManager
from database.managers.buyer_order_manager import BuyerOrderManager
from database.managers.product_position_manager import ProductPositionManager
from database.managers.user_info_manager import UserInfoManager
from keyboards.client import (
    get_main_inline_keyboard,
    get_orders_inline_keyboard,
    get_orders_list_kb,
    get_order_detail_kb,
    get_cancel_confirm_kb,
    get_all_products,
    choice_of_delivery,
    get_profile_inline_keyboard,
    confirm_geoposition_kb
)

from utils.constants import status_map, delivery_map
from utils.logger import get_logger
from utils.notifications import notify_admins
from utils.phone import normalize_phone
from utils.save_image import MEDIA_PUBLIC_ROOT, MEDIA_DIR
from utils.secrets import get_admin_ids

MIN_PAYMENT_AMOUNT = 60

log = get_logger("[Bot.Client]")

client_router = Router()


# --- –í–†–ï–ú–ï–ù–ù–´–ô –û–¢–õ–ê–î–û–ß–ù–´–ô MIDDLEWARE ---
@client_router.callback_query.outer_middleware()
async def spy_middleware(handler, event: CallbackQuery, data: dict):
    state: FSMContext = data.get("state")
    if state:
        current_state = await state.get_state()
        print("üïµÔ∏è‚Äç SPY: –ü–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π CallbackQuery")
        print(f"   - –î–∞–Ω–Ω—ã–µ callback: {event.data}")
        print(f"   - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {current_state}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä
    result = await handler(event, data)

    if state:
        new_state = await state.get_state()
        print("üïµÔ∏è‚Äç SPY: –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CallbackQuery")
        print(f"   - –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {new_state}")
        print("-" * 30)

    return result


# ------------------------------


async def handle_telegram_error(
        e: TelegramBadRequest,
        message: Message = None,
        call: CallbackQuery = None,
        state: FSMContext = None
) -> bool:
    error_text = str(e).lower()

    if "message is not modified" in error_text:
        log.debug("[Bot.Client] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ (message is not modified)")
        return True

    if (
            "message to delete not found" in error_text
            or "message can't be deleted" in error_text
            or "message to edit not found" in error_text
    ):
        if state:
            await state.clear()
            log.debug("[Bot.Client] FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Telegram")

        user = call.from_user if call else message.from_user if message else None
        is_admin = user and user.id in get_admin_ids()

        target = call.message if call else message if message else None
        if target:
            await target.answer(
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_inline_keyboard(is_admin)
            )
            log.info(f"[Bot.Client] –û—à–∏–±–∫–∞ Telegram –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id if user else 'unknown'}")
        return True

    log.warning(f"[Bot.Client] [UNHANDLED TelegramBadRequest] {e}")
    return False


class Registration(StatesGroup):
    full_name = State()
    phone = State()


class ProfileEdit(StatesGroup):
    full_name = State()
    phone = State()


class CreateOrder(StatesGroup):
    choose_products = State()  # –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
    choose_delivery = State()  # –®–∞–≥ 2: –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è (—Å–∞–º–æ–≤—ã–≤–æ–∑/–¥–æ—Å—Ç–∞–≤–∫–∞)
    enter_address = State()  # –®–∞–≥ 3: –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏)
    confirm_geoposition = State()  # –®–∞–≥ 4: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
    enter_porch = State()  # –®–∞–≥ 5: –í–≤–æ–¥ –ø–æ–¥—ä–µ–∑–¥–∞
    enter_floor = State()  # –®–∞–≥ 6: –í–≤–æ–¥ —ç—Ç–∞–∂–∞
    enter_apartment = State()  # –®–∞–≥ 7: –í–≤–æ–¥ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    confirm_order = State()  # –®–∞–≥ 8: –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏
    waiting_payment = State()  # –®–∞–≥ 9: –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã


@client_router.message(CommandStart())
async def client_start(message: Message, state: FSMContext, user_info_manager: UserInfoManager,
                       buyer_info_manager: BuyerInfoManager):
    log.info(f"[Bot.Client] –ù–æ–≤—ã–π —Å—Ç–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    user_id = await user_info_manager.add_user(message.from_user.id)

    is_admin = message.from_user.id in get_admin_ids()
    if not is_admin:
        is_registered = await buyer_info_manager.is_registered(user_id)
        if is_registered:
            bonuses = await buyer_info_manager.get_user_bonuses_by_id(user_id)
            await message.answer(
                text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: \n"
                     f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: `{bonuses if bonuses else 0}` —Ä—É–±.",
                parse_mode="Markdown",
                reply_markup=get_main_inline_keyboard(is_admin)
            )
            return
    else:
        await message.answer(
            text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: \n",
            reply_markup=get_main_inline_keyboard(is_admin)
        )
        return

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, –Ω–æ–≤—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å! –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n"
        "–í–≤–µ–¥–∏—Ç–µ *–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é*:",
        parse_mode="Markdown",
    )
    await state.set_state(Registration.full_name)


@client_router.message(Registration.full_name)
async def reg_get_fullname(message: Message, state: FSMContext) -> None:
    full_name: str = message.text.strip()

    log.info(f"[Bot.Client] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–æ–¥–∏—Ç –∏–º—è {full_name}")

    if len(full_name.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ *–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é* —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        return

    await state.update_data(full_name=full_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ `+77771234567` –∏–ª–∏ `87771234567`:",
        parse_mode="Markdown",
    )
    await state.set_state(Registration.phone)


@client_router.message(Registration.phone)
async def reg_get_phone(
        message: Message,
        state: FSMContext,
        buyer_info_manager,
) -> None:
    phone_e164 = normalize_phone(message.text)

    log.info(f"[Bot.Client] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–æ–¥–∏—Ç –∏–º—è {phone_e164}")

    if phone_e164 is None:
        await message.answer(
            "–¢–µ–ª–µ—Ñ–æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. "
            "–£–∫–∞–∂–∏—Ç–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â—ë —Ä–∞–∑ (–ø—Ä–∏–º–µ—Ä: +77771234567):"
        )
        return

    data = await state.get_data()
    full_name: str = data["full_name"]
    tg_user_id = message.from_user.id

    await buyer_info_manager.create_buyer_info(
        tg_user_id=tg_user_id,
        name_surname=full_name,
        tel_num=phone_e164,
        tg_username=message.from_user.username,
    )

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üôå\n–í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_inline_keyboard(is_admin=False),
    )
    log.info(f"[Bot.Client] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!")
    await state.clear()


@client_router.callback_query(F.data == "my-orders")
async def cb_my_orders(call: CallbackQuery, buyer_order_manager) -> None:
    await call.answer()
    tg_user_id = call.from_user.id
    log.info(f"[Bot.Client] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_user_id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã")

    active_cnt = await buyer_order_manager.count_active_orders_by_tg(tg_user_id)
    total_cnt = await buyer_order_manager.count_total_orders_by_tg(tg_user_id)

    await call.message.edit_text(
        f"–ö–æ–ª-–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{active_cnt}` \n–û–±—â–µ–µ –∫–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤: `{total_cnt}`",
        reply_markup=get_orders_inline_keyboard(),
        parse_mode="Markdown"
    )


@client_router.callback_query(F.data == "back-main")
async def cb_back_main(call: CallbackQuery, state: FSMContext, buyer_info_manager):
    await call.answer()
    await cleanup_client_media(call.bot, state, call.message.chat.id)
    is_admin = call.from_user.id in get_admin_ids()
    bonuses = await buyer_info_manager.get_user_bonuses_by_tg(call.from_user.id)
    try:
        await call.message.edit_text(
            text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: \n"
                 f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: `{bonuses if bonuses else 0}` —Ä—É–±.",
            parse_mode="Markdown",
            reply_markup=get_main_inline_keyboard(is_admin),
        )
        await state.clear()
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


@client_router.callback_query(F.data == "orders-active")
async def show_active_list(call: CallbackQuery, buyer_order_manager):
    await call.answer()
    tg = call.from_user.id
    orders = await buyer_order_manager.list_orders(tg_user_id=tg, finished=False)
    cnt = len(orders)
    text = f"–ö–æ–ª-–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{cnt}`"

    try:
        await call.message.edit_text(
            text, parse_mode="Markdown",
            reply_markup=get_orders_list_kb(orders, finished=False, page=1)
        )
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


@client_router.callback_query(F.data == "orders-finished")
async def show_finished_list(call: CallbackQuery, buyer_order_manager):
    await call.answer()
    tg = call.from_user.id
    orders = await buyer_order_manager.list_orders(tg_user_id=tg, finished=True)
    cnt = len(orders)
    text = f"–ö–æ–ª-–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{cnt}`"

    try:
        await call.message.edit_text(
            text, parse_mode="Markdown",
            reply_markup=get_orders_list_kb(orders, finished=True, page=1)
        )
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


@client_router.callback_query(F.data.startswith("orders:page:"))
async def on_orders_page(call: CallbackQuery, buyer_order_manager):
    _, _, suffix, page_str = call.data.split(":")
    finished = (suffix == "fin")
    try:
        page = int(page_str)
    except ValueError:
        page = 1

    tg = call.from_user.id
    orders = await buyer_order_manager.list_orders(tg_user_id=tg, finished=finished)
    kb = get_orders_list_kb(orders, finished=finished, page=page)

    try:
        await call.message.edit_reply_markup(reply_markup=kb)
        await call.answer()
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        await handle_telegram_error(e, call=call)


@client_router.callback_query(F.data.startswith("order:"), StateFilter(None))
async def order_detail(call: CallbackQuery, buyer_order_manager, *, delivery_status_text: str | None = None):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞. –ú–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ —Å—Ç–∞—Ç—É—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏.
    """
    await call.answer()
    _, oid, kind = call.data.split(":")
    order = await buyer_order_manager.get_order(call.from_user.id, int(oid))
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    items = await buyer_order_manager.list_items_by_order_id(order.id)
    items_text = "\n".join([f"‚Ä¢ {it.title} √ó{it.qty} ‚Äî {it.price * it.qty} ‚ÇΩ" for it in items]) if items else "–ø—É—Å—Ç–æ"

    total = await buyer_order_manager.order_total_sum_by_order_id(order.id)
    status_txt = status_map.get(order.status.value, order.status.value)
    delivery_txt = delivery_map.get(order.delivery_way.value, order.delivery_way.value)

    # –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ —á–∞—Å—Ç—è–º
    text_parts = [
        f"–ó–∞–∫–∞–∑ ‚Ññ{order.id}",
        f"–¢–æ–≤–∞—Ä—ã:\n{items_text}",
        f"–ò—Ç–æ–≥–æ: {total} ‚ÇΩ",
        f"–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {delivery_txt}",
        f"–°—Ç–∞—Ç—É—Å: {status_txt}",
        f"–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {order.registration_date:%d.%m.%Y}"
    ]
    if order.delivery_date:
        text_parts.append(f"–ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {order.delivery_date:%d.%m.%Y}")

    # –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è), –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if delivery_status_text:
        text_parts.append(delivery_status_text)

    text = "\n\n".join(text_parts)

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ parse_mode, –∫–∞–∫ –≤—ã –∏ —Ö–æ—Ç–µ–ª–∏
        await call.message.edit_text(
            text,
            reply_markup=get_order_detail_kb(order),
            disable_web_page_preview=True
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await handle_telegram_error(e, call=call)


@client_router.callback_query(F.data.startswith("cancel-no:"))
async def cancel_no(call: CallbackQuery, buyer_order_manager):
    _, order_id, suffix = call.data.split(":")
    order = await buyer_order_manager.get_order(call.from_user.id, int(order_id))
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ —É–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    items = await buyer_order_manager.list_items_by_order_id(order.id)
    if items:
        lines = [
            f"‚Ä¢ {it.title} √ó{it.qty} ‚Äî `{it.price * it.qty}`‚ÇΩ"
            for it in items
        ]
        items_text = "\n".join(lines)
    else:
        items_text = "_–ø—É—Å—Ç–æ_"

    total = await buyer_order_manager.order_total_sum_by_order_id(order.id)

    status_txt = status_map.get(order.status.value, order.status.value)
    delivery_txt = delivery_map[order.delivery_way.value]

    text = (
        f"*–ó–∞–∫–∞–∑ ‚Ññ{order.id}*\n\n"
        f"*–¢–æ–≤–∞—Ä—ã:*\n{items_text}\n\n"
        f"*–ò—Ç–æ–≥–æ:* `{total} ‚ÇΩ`\n"
        f"*–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:* {delivery_txt}\n"
        f"*–°—Ç–∞—Ç—É—Å:* {status_txt}\n"
        f"*–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:* {order.registration_date:%d.%m.%Y}"
    )
    if order.delivery_date:
        text += f"\n*–ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:* {order.delivery_date:%d.%m.%Y}"

    try:
        await call.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=get_order_detail_kb(order),
        )
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


@client_router.callback_query(F.data.startswith("order-cancel:"))
async def order_cancel_init(call: CallbackQuery):
    _, order_id, suffix = call.data.split(":")
    await call.answer()
    try:
        await call.message.edit_text(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?",
            reply_markup=get_cancel_confirm_kb(int(order_id), suffix),
        )
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


@client_router.callback_query(F.data.startswith("cancel-yes:"))
async def order_cancel_yes(
        call: CallbackQuery,
        bot: Bot,
        buyer_order_manager: BuyerOrderManager,
        yandex_delivery_client: YandexDeliveryClient,
        buyer_info_manager: BuyerInfoManager,
):
    order_id = int(call.data.split(":")[1])
    log.info(f"[–û–¢–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê #{order_id}] - –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.from_user.id}")

    order = await buyer_order_manager.get_order_by_id(order_id)
    if not order:
        log.warning(f"[–û–¢–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê #{order_id}] - –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if order.yandex_claim_id:
        await call.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Ç–º–µ–Ω—ã –≤ –Ø–Ω–¥–µ–∫—Å–µ...")
        log.info(f"[–û–¢–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê #{order_id}] - –ù–∞–π–¥–µ–Ω claim_id: {order.yandex_claim_id}. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è.")

        # 1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–ï–†–°–ò–ò
        claim_info = await yandex_delivery_client.get_claim_info(order.yandex_claim_id)
        if not claim_info:
            log.error(f"[–û–¢–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê #{order_id}] - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞.")
            await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤ –Ø–Ω–¥–µ–∫—Å–µ.", show_alert=True)
            return

        current_version = claim_info.get("version", 1)
        log.info(f"[–û–¢–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê #{order_id}] - –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –∑–∞—è–≤–∫–∏: {current_version}")

        # 2. –£–∑–Ω–∞–µ–º —É—Å–ª–æ–≤–∏—è –æ—Ç–º–µ–Ω—ã
        cancel_info = await yandex_delivery_client.get_cancellation_info(order.yandex_claim_id)

        if not cancel_info or cancel_info.get("cancel_state") != "free":
            price_info = (f"(—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–π –æ—Ç–º–µ–Ω—ã:"
                          f" {cancel_info.get('price', 'N/A')} —Ä—É–±."
                          f")") if cancel_info and cancel_info.get(
                "cancel_state") == "paid" else ""

            cancel_state = cancel_info.get("cancel_state") if cancel_info else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            log.warning(
                f"[–û–¢–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê #{order_id}] - –û—Ç–º–µ–Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π. "
                f"–°—Ç–∞—Ç—É—Å –æ—Ç–º–µ–Ω—ã: {cancel_state}. –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω.")

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É
            await call.message.edit_text(
                f"‚ùóÔ∏è–ó–∞–∫–∞–∑ ‚Ññ{order.id} —É–∂–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ {price_info}.\n\n"
                "–í–µ—Ä–æ—è—Ç–Ω–æ, –∫—É—Ä—å–µ—Ä —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–ª–∏ –≤ –ø—É—Ç–∏.\n"
                "–î–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"order:{order.id}:act")]
                ])
            )
            await call.answer()  # –£–±–∏—Ä–∞–µ–º show_alert, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            return

        # 3. –û—Ç–º–µ–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –Ø–Ω–¥–µ–∫—Å–µ
        log.info(f"[–û–¢–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê #{order_id}] - –û—Ç–º–µ–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É...")
        is_cancelled_on_yandex = await yandex_delivery_client.cancel_claim(
            claim_id=order.yandex_claim_id,
            cancel_state="free",
            version=current_version
        )
        if not is_cancelled_on_yandex:
            log.error(f"[–û–¢–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê #{order_id}] - –Ø–Ω–¥–µ–∫—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.")
            await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Å–∏—Å—Ç–µ–º–µ –¥–æ—Å—Ç–∞–≤–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", show_alert=True)
            return

        log.info(f"[–û–¢–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê #{order_id}] - –ó–∞—è–≤–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    # 4. –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –Ω–∞—à–µ–π –ë–î
    await buyer_order_manager.cancel_order(order_id)
    log.info(f"[–û–¢–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê #{order_id}] - –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î.")

    await call.answer("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω!", show_alert=True)
    # --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–£ ---
    buyer_data = await buyer_info_manager.get_profile_by_tg(call.from_user.id)
    admin_text = (
        f"‚ùå *–ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{order_id}*\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {buyer_data.get('name_surname')} (@{buyer_data.get('tg_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')})"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await notify_admins(bot, admin_text)
    # --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ---

    # 4. –û–±–Ω–æ–≤–ª—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    orders = await buyer_order_manager.list_orders(tg_user_id=call.from_user.id, finished=False)
    header = f"–ö–æ–ª-–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{len(orders)}`"
    try:
        await call.message.edit_text(
            header,
            parse_mode="Markdown",
            reply_markup=get_orders_list_kb(orders, finished=False)
        )
    except TelegramBadRequest as e:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await handle_telegram_error(e, call=call)
        await call.message.answer(header, parse_mode="Markdown",
                                  reply_markup=get_orders_list_kb(orders, finished=False))


@client_router.callback_query(F.data.startswith("back-to-list:"))
async def back_to_list(call: CallbackQuery, buyer_order_manager):
    await call.answer()
    suffix = call.data.split(":")[1]
    finished = suffix == "fin"

    orders = await buyer_order_manager.list_orders(
        tg_user_id=call.from_user.id,
        finished=finished,
    )
    cnt = len(orders)
    header = (
        f"–ö–æ–ª-–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{cnt}`"
        if not finished else
        f"–ö–æ–ª-–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{cnt}`"
    )

    try:
        await call.message.edit_text(
            header,
            parse_mode="Markdown",
            reply_markup=get_orders_list_kb(orders, finished)
        )
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


@client_router.callback_query(F.data.startswith("back-orders-menu:"))
async def back_orders_menu(call: CallbackQuery, buyer_order_manager):
    await call.answer()

    tg_id = call.from_user.id
    active_cnt = await buyer_order_manager.count_active_orders_by_tg(tg_id)
    total_cnt = await buyer_order_manager.count_total_orders_by_tg(tg_id)

    header = (
        f"–ö–æ–ª-–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{active_cnt}`\n"
        f"–û–±—â–µ–µ –∫–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤: `{total_cnt}`"
    )

    try:
        await call.message.edit_text(
            header,
            parse_mode="Markdown",
            reply_markup=get_orders_inline_keyboard(),
        )
    except TelegramBadRequest as e:
        log.error(f"[Bot.Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_telegram_error(e, call=call)
        return


def _text_cart_preview(items: list[dict], total: int, delivery_way: str, address: str | None,
                       used_bonus: int = 0) -> str:
    lines = ["*–í—ã –≤—ã–±—Ä–∞–ª–∏:*"]
    for it in items:
        lines.append(f"‚Ä¢ {it['title']} √ó{it['qty']} ‚Äî {it['price'] * it['qty']} ‚ÇΩ")
    lines.append(f"\n–ë–æ–Ω—É—Å–æ–≤ —Å–ø–∏—Å–∞–Ω–æ: `{used_bonus}`")
    lines.append(f"–ö –æ–ø–ª–∞—Ç–µ: `{total - used_bonus} ‚ÇΩ`")
    lines.append(f"–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: *{'–î–æ—Å—Ç–∞–≤–∫–∞' if delivery_way == 'delivery' else '–°–∞–º–æ–≤—ã–≤–æ–∑'}*")
    if delivery_way == "delivery":
        lines.append(f"–ê–¥—Ä–µ—Å: {address or '‚Äî'}")
    return "\n".join(lines)


def abs_image_path(rel_path: str) -> str:
    # rel_path –≤–∏–¥–∞ 'product_images/xxx.jpg' -> –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    p = Path(rel_path)
    if p.is_absolute():
        return str(p)
    # –æ—Ç—Ä–µ–∑–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'product_images/'
    rel_name = str(p)
    if rel_name.startswith(f"{MEDIA_PUBLIC_ROOT}/"):
        rel_name = rel_name[len(MEDIA_PUBLIC_ROOT) + 1:]
    return str(MEDIA_DIR / rel_name)


CLIENT_MEDIA_IDS_KEY = "client_media_msg_ids"


async def cleanup_client_media(bot, state, chat_id: int):
    data = await state.get_data()
    ids = data.get(CLIENT_MEDIA_IDS_KEY, [])
    for mid in ids:
        try:
            await bot.delete_message(chat_id, mid)
        except TelegramBadRequest:
            pass
    await state.update_data(**{CLIENT_MEDIA_IDS_KEY: []})


async def send_products_album(target: Message | CallbackQuery, products_page: list[dict], state):
    if isinstance(target, Message):
        chat_id = target.chat.id
        base = target
        bot = target.bot
    else:
        chat_id = target.message.chat.id
        base = target.message
        bot = target.bot

    await cleanup_client_media(bot, state, chat_id)

    if not products_page:
        return

    media: list[InputMediaPhoto] = []
    lines: list[str] = []

    for i, p in enumerate(products_page, start=1):
        img = p.get("image_path")
        if not img:
            continue
        path = abs_image_path(img)
        lines.append(f"{i}) {p['title']} ‚Äî {p['price']} ‚ÇΩ")
        media.append(InputMediaPhoto(media=FSInputFile(path)))
        if len(media) == 10:
            break

    if not media:
        return

    media[-1].caption = "\n".join(lines)
    media[-1].parse_mode = "Markdown"

    try:
        msgs = await base.answer_media_group(media=media)
    except TelegramBadRequest:
        for m in media:
            m.caption = None
        msgs = await base.answer_media_group(media=media)
        await base.answer("\n".join(lines), parse_mode="Markdown")

    await state.update_data(**{CLIENT_MEDIA_IDS_KEY: [m.message_id for m in msgs]})


@client_router.callback_query(F.data.startswith("cart:page:"))
async def on_cart_page(call: CallbackQuery, state: FSMContext, product_position_manager):
    try:
        page = int(call.data.split(":")[-1])
    except ValueError:
        await call.answer()
        return

    data = await state.get_data()
    cart: dict[int, int] = data.get("cart", {})
    products = await product_position_manager.list_not_empty_order_positions()

    total_pages = max(1, ceil(len(products) / 10))
    page = max(1, min(page, total_pages))
    await state.update_data(page=page)

    start = (page - 1) * 10
    end = start + 10
    await send_products_album(call, products[start:end], state)

    kb = get_all_products(products, cart, page=page)
    try:
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=kb)
    except Exception:
        await call.message.edit_reply_markup(reply_markup=kb)
    await call.answer()


@client_router.callback_query(CreateOrder.choose_delivery, F.data == "cart:back")
async def back_from_delivery_to_cart(call: CallbackQuery, state: FSMContext, product_position_manager):
    data = await state.get_data()
    cart: dict[int, int] = data.get("cart", {})
    page: int = data.get("page", 1)

    products = await product_position_manager.list_not_empty_order_positions()

    total_pages = max(1, ceil(len(products) / 10))
    page = max(1, min(page, total_pages))
    await state.set_state(CreateOrder.choose_products)
    await state.update_data(page=page)

    start = (page - 1) * 10
    end = start + 10
    await send_products_album(call, products[start:end], state)

    kb = get_all_products(products, cart, page=page)
    try:
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=kb)
    except Exception:
        await call.message.edit_reply_markup(reply_markup=kb)
    await call.answer()


@client_router.callback_query(F.data == "create-order")
async def start_create(call: CallbackQuery, state: FSMContext, product_position_manager: ProductPositionManager):
    await state.clear()
    await state.update_data(cart={}, page=1)
    products = await product_position_manager.list_not_empty_order_positions()
    start, end = 0, 10
    await send_products_album(call, products[start:end], state)

    kb = get_all_products(products, cart={}, page=1)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=kb)

    await state.set_state(CreateOrder.choose_products)
    await call.answer()


@client_router.callback_query(CreateOrder.confirm_order, F.data == "addr:back")
async def back_from_confirm_to_delivery(call: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç–∫—Ä–∞–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    –æ–±—Ä–∞—Ç–Ω–æ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.
    """
    await call.answer()

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã
    await state.update_data(address=None, delivery_cost=None)

    await call.message.edit_text(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑?",
        reply_markup=choice_of_delivery()
    )
    await state.set_state(CreateOrder.choose_delivery)


@client_router.callback_query(CreateOrder.enter_address, F.data.startswith("addr:"))
async def handle_address_source_choice(
        call: CallbackQuery,
        state: FSMContext,
        bot: Bot,  # –ù–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã
        buyer_info_manager: BuyerInfoManager
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π" –∏–ª–∏ "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é".
    """
    await call.answer()
    action = call.data.split(":")[1]

    if action == "enter":
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º).\n\n"
                                     "–ù–∞–ø—Ä–∏–º–µ—Ä: <b>–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –ë–æ–ª—å—à–∞—è –ü–æ–∫—Ä–æ–≤—Å–∫–∞—è, 1</b>", parse_mode="HTML")
        return

    if action == "use_saved":
        saved_address = await buyer_info_manager.get_address_by_tg(call.from_user.id)

        if not saved_address:
            await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")
            await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º).\n\n"
                                         "–ù–∞–ø—Ä–∏–º–µ—Ä: <b>–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –ë–æ–ª—å—à–∞—è –ü–æ–∫—Ä–æ–≤—Å–∫–∞—è, 1</b>", parse_mode="HTML")
            return

        await call.message.edit_text("‚è≥ –ò—â—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞ –∫–∞—Ä—Ç–µ...")

        coords = await geocode_address(saved_address)
        if not coords:
            await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞ –∫–∞—Ä—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")
            return

        lon, lat = coords
        await state.update_data(address=saved_address, latitude=lat, longitude=lon)
        await state.set_state(CreateOrder.confirm_geoposition)

        await bot.send_location(chat_id=call.message.chat.id, latitude=lat, longitude=lon)
        await call.message.answer(
            "–Ø –Ω–∞—à–µ–ª –≤–∞—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∑–¥–µ—Å—å. –í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=confirm_geoposition_kb()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ PreCheckoutQuery
@client_router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞)
    order_id = int(pre_checkout_query.invoice_payload.split(":")[1])
    log.info(f"–ü–æ–ª—É—á–µ–Ω pre-checkout –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂
    await pre_checkout_query.answer(ok=True)
    log.info(f"–û—Ç–≤–µ—Ç–∏–ª–∏ ok=True –Ω–∞ pre-checkout –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")


@client_router.callback_query(F.data == "noop")
async def noop(call: CallbackQuery):
    await call.answer()


async def _render_profile_text(tg_id: int, buyer_info_manager) -> str:
    rec = await buyer_info_manager.get_profile_by_tg(tg_id)
    if not rec:
        return "–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    name = rec["name_surname"]
    phone = rec["tel_num"]
    return (
        "*–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ*\n\n"
        f"*–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è:* {name}\n"
        f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {phone}\n"
    )


async def show_profile_menu(target: Message | CallbackQuery, buyer_info_manager):
    tg_id = target.from_user.id if isinstance(target, CallbackQuery) else target.from_user.id
    await buyer_info_manager.upsert_username_by_tg(tg_id, target.from_user.username)
    text = await _render_profile_text(tg_id, buyer_info_manager)
    if isinstance(target, CallbackQuery):
        await target.message.edit_text(text, parse_mode="Markdown", reply_markup=get_profile_inline_keyboard())
        await target.answer()
    else:
        await target.answer(text, parse_mode="Markdown", reply_markup=get_profile_inline_keyboard())


@client_router.callback_query(F.data == "change-profile")
async def cb_open_profile(call: CallbackQuery, buyer_info_manager):
    await show_profile_menu(call, buyer_info_manager)


@client_router.callback_query(F.data == "profile:edit-name")
async def cb_edit_name(call: CallbackQuery, state: FSMContext):
    await state.set_state(ProfileEdit.full_name)
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ *–í–∞—à–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é* (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):",
        parse_mode="Markdown"
    )
    await call.answer()


@client_router.message(ProfileEdit.full_name)
async def msg_set_name(message: Message, state: FSMContext, buyer_info_manager):
    full_name = " ".join(message.text.split()).strip()
    if len(full_name.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ *–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é* —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.", parse_mode="Markdown")
        return
    await buyer_info_manager.update_full_name_by_tg(message.from_user.id, full_name)
    await state.clear()
    await message.answer("–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è *—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã* ‚úÖ", parse_mode="Markdown")
    await show_profile_menu(message, buyer_info_manager)


@client_router.callback_query(F.data == "profile:edit-phone")
async def cb_edit_phone(call: CallbackQuery, state: FSMContext):
    await state.set_state(ProfileEdit.phone)
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ *–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ `+77771234567`:",
        parse_mode="Markdown"
    )
    await call.answer()


@client_router.message(ProfileEdit.phone)
async def msg_set_phone(message: Message, state: FSMContext, buyer_info_manager):
    phone_e164 = normalize_phone(message.text)
    if phone_e164 is None:
        await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `+77771234567`.",
                             parse_mode="Markdown")
        return
    await buyer_info_manager.update_phone_by_tg(message.from_user.id, phone_e164)
    await state.clear()
    await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω* ‚úÖ", parse_mode="Markdown")
    await show_profile_menu(message, buyer_info_manager)
